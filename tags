!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/gero/gltry/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
PI	src/main.cpp	/^constexpr float PI = 3.141592653589793238462f;$/;"	v	typeref:typename:float
ShaderProgram	src/shaderprogram.cpp	/^ShaderProgram::ShaderProgram(const char* vShaderFile, const char* fShaderFile) {$/;"	f	class:ShaderProgram
ShaderProgram	src/shaderprogram.hpp	/^class ShaderProgram {$/;"	c
a	src/shaderprogram.cpp	/^GLuint ShaderProgram::a(const char* attName) {$/;"	f	class:ShaderProgram	typeref:typename:GLuint
drawScene	src/main.cpp	/^void drawScene() {$/;"	f	typeref:typename:void
errCallback	src/main.cpp	/^void errCallback(int error, const char *description) {$/;"	f	typeref:typename:void
exitFail	src/main.cpp	/^void exitFail(const char *message) {$/;"	f	typeref:typename:void
fragmentShader	src/shaderprogram.hpp	/^    GLuint fragmentShader;$/;"	m	class:ShaderProgram	typeref:typename:GLuint
initProgram	src/main.cpp	/^void initProgram(GLFWwindow *window) {$/;"	f	typeref:typename:void
keyCallback	src/main.cpp	/^void keyCallback(GLFWwindow *window, int key, int scancode, int act, int mod) {$/;"	f	typeref:typename:void
loadShader	src/shaderprogram.cpp	/^GLuint ShaderProgram::loadShader(GLenum shaderType, const char* fileName) {$/;"	f	class:ShaderProgram	typeref:typename:GLuint
main	src/main.cpp	/^int main() {$/;"	f	typeref:typename:int
mouseCallback	src/main.cpp	/^void mouseCallback(GLFWwindow *window, double xpos, double ypos) {$/;"	f	typeref:typename:void
readFile	src/shaderprogram.cpp	/^char* ShaderProgram::readFile(const char* fileName) {$/;"	f	class:ShaderProgram	typeref:typename:char *
shaderProgram	src/shaderprogram.hpp	/^    GLuint shaderProgram;$/;"	m	class:ShaderProgram	typeref:typename:GLuint
sp	src/main.cpp	/^ShaderProgram *sp;$/;"	v	typeref:typename:ShaderProgram *
u	src/shaderprogram.cpp	/^GLuint ShaderProgram::u(const char* varName) {$/;"	f	class:ShaderProgram	typeref:typename:GLuint
use	src/shaderprogram.cpp	/^void ShaderProgram::use() {$/;"	f	class:ShaderProgram	typeref:typename:void
vertexShader	src/shaderprogram.hpp	/^    GLuint vertexShader;$/;"	m	class:ShaderProgram	typeref:typename:GLuint
verts	src/main.cpp	/^const float verts[] = {$/;"	v	typeref:typename:const float[]
~ShaderProgram	src/shaderprogram.cpp	/^ShaderProgram::~ShaderProgram() {$/;"	f	class:ShaderProgram
